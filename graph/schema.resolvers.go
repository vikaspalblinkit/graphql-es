package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"compensation-api/graph/model"
	"context"
)

// Compensations is the resolver for the compensations field.
func (r *queryResolver) Compensations(ctx context.Context, id *string, salaryGte *float64, location *string, jobTitleMatch *string, sortBy *string, sortOrder *string, limit *int, fields []string) ([]*model.Compensation, error) {
	filter := map[string]interface{}{}
	if salaryGte != nil {
		filter["salary_gte"] = *salaryGte
	}
	if location != nil {
		filter["location"] = *location
	}
	if jobTitleMatch != nil {
		filter["job_title"] = *jobTitleMatch
	}
	if id != nil {
		filter["id"] = *id
	}
	s := "asc"
	if sortOrder != nil {
		s = *sortOrder
	}
	f := fields
	l := 10
	if limit != nil {
		l = *limit
	}
	results, err := r.ES.Search(filter, sortBy, s, f, l)
	if err != nil {
		return nil, err
	}
	var out []*model.Compensation
	for _, c := range results {
		out = append(out, elasticToModelCompensation(c))
	}
	return out, nil
}

// Compensation is the resolver for the compensation field.
func (r *queryResolver) Compensation(ctx context.Context, id string) (*model.Compensation, error) {
	c, err := r.ES.GetByID(id)
	if err != nil {
		return nil, err
	}
	return elasticToModelCompensation(c), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
